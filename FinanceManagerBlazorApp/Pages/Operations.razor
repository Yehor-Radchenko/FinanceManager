@page "/operations"

@using System.Text.Json
@using FinanceManagerBlazorApp.ViewModels;
@using MudBlazor

@layout _Layout

@inject IHttpClientFactory ClientFactory
@inject ISnackbar Snackbar

<h1 class="mb-4">Operations</h1>

<MudDataGrid T="Operation" Items="@_operations" ReadOnly="false"  Hover="true" Breakpoint="Breakpoint.Sm"
             StartedEditingItem="@StartedEditingItem" CommittedItemChanges="@CommittedItemChanges" EditMode="DataGridEditMode.Form"
             LoadingProgressColor="Color.Info" EditTrigger="DataGridEditTrigger.OnRowClick">

    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.MoneyAmount" Title="Money amount" Format="C" />
        <PropertyColumn Property="x => x.DateTime" Title="Date & Time" IsEditable="false" />
        <PropertyColumn Property="x => x.CategoryId" Title="Category">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.CategoryId" Required RequiredError="You must select a Category!!!" Margin="@Margin.Dense">
                     @foreach (var category in _categories)
                    {
                        <MudSelectItem Value="category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => OpenDeleteConfirmationDialog(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<style>
    .add-button {
        position: fixed;
        bottom: 20px;
        right: 30px;
    }
</style>

<MudButton Class="add-button" Color="Color.Primary" Variant="Variant.Filled" @onclick="@OpenAddOperationDialog">Add</MudButton>
<MudDialog @bind-IsVisible="@_isAddOperationDialogOpen" DisableSidePadding="true" Options="@dialogWidthOptions">
    <DialogContent >
        <MudContainer Style="overflow-y: scroll">
            <div style="text-align: center; padding-bottom: 16px;">
                <h3>Add new operation</h3>
            </div>
            <MudForm Model="@operation">
                <MudTextField @bind-Value="@operation.Name" Label="Name" Required="true" />
                <MudTextField @bind-Value="@operation.Description" Label="Description" Required="true" />
                <MudNumericField @bind-Value="@operation.MoneyAmount" Label="Money amount" Required="true" />
                <MudDatePicker AutoClose="true" @bind-Date="@date" Editable="true" Label="Date" PickerVariant="PickerVariant.Dialog" />
                <MudTimePicker @bind-Time="@time" Label="Time" Editable="true" PickerVariant="PickerVariant.Dialog" />
                <MudSelect @bind-Value="@operation.CategoryId" Label="Type" Required="true" >
                    @foreach (var category in _categories)
                    {
                        <MudSelectItem Value="category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveOperationClick">Save</MudButton>
        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="CloseAddOperationDialog">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="@_isDeleteConfirmationDialogOpen">
    <DialogContent>
        <div style="text-align: center; padding-bottom: 16px;">
            <h3>Confirm Deletion</h3>
            <p>Are you sure you want to delete this operation?</p>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmDelete">Yes</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelDelete">No</MudButton>
    </DialogActions>
</MudDialog>

@code {
    List<Operation> _operations = new List<Operation>();
    List<Category> _categories = new List<Category>();
    Operation operation = new Operation();
    bool _isAddOperationDialogOpen = false;
    bool _isDeleteConfirmationDialogOpen = false;
    bool _drawerOpen = false;
    DialogOptions dialogWidthOptions = new DialogOptions()
    {
        MaxWidth = MaxWidth.Small,
        FullWidth = true
    };
    DateTime? date = DateTime.Now;
    TimeSpan? time = DateTime.Now.TimeOfDay;

    protected override async Task OnInitializedAsync() => await LoadData();

    async Task LoadData()
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        _operations = await httpClient.GetFromJsonAsync<List<Operation>>("/api/operation") ?? _operations;
        _categories = await httpClient.GetFromJsonAsync<List<Category>>("/api/category") ?? _categories;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task StartedEditingItem(Operation item)
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        if (_categories.Count == 0)
            _categories = await httpClient.GetFromJsonAsync<List<Category>>("/api/category") ?? _categories;
    }

    async Task CommittedItemChanges(Operation item)
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        HttpResponseMessage response = await httpClient.PutAsJsonAsync("/api/operation", item);
        await LoadData();
    }

    void CloseAddOperationDialog()
    {
        _isAddOperationDialogOpen = false;
    }

    private async Task SaveOperationClick()
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        operation.DateTime = new DateTime(date.Value.Year, date.Value.Month, date.Value.Day, time.Value.Hours, time.Value.Minutes, 0);
        HttpResponseMessage response = await httpClient.PostAsJsonAsync<Operation>("/api/operation", operation);
        CloseAddOperationDialog();
        Snackbar.Add("Saved successfully.", Severity.Success);
        await LoadData();
    }

    void OpenAddOperationDialog()
    {
        _isAddOperationDialogOpen = true;
    }

    private async Task ConfirmDelete()
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        HttpResponseMessage response = await httpClient.DeleteAsync("/api/operation/" + operation.Id);

        if (response.IsSuccessStatusCode)
        {
            await LoadData();
            Snackbar.Add("Deleted successfully.", Severity.Success);
        }
        else
            Snackbar.Add($"Something wents wrong. Response status code: {response.StatusCode}.", Severity.Error);
        CloseDeleteConfirmationDialog();
    }

    private void OpenDeleteConfirmationDialog(Operation item)
    {
        operation = item;
        _isDeleteConfirmationDialogOpen = true;
    }

    private void CloseDeleteConfirmationDialog()
    {
        _isDeleteConfirmationDialogOpen = false;
    }

    private void CancelDelete()
    {
        CloseDeleteConfirmationDialog();
    }
}
