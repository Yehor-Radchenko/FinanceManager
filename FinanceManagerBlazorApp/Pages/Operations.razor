@page "/operations"

@using System.Text.Json
@using FinanceManagerBlazorApp.ViewModels;
@using MudBlazor

@layout _Layout

@inject IHttpClientFactory ClientFactory

<h1 class="mb-4">Operations</h1>

<MudDataGrid T="Operation" Items="@_operations" ReadOnly="false"  Hover="true" Breakpoint="Breakpoint.Sm"
             StartedEditingItem="@StartedEditingItem" CommittedItemChanges="@CommittedItemChanges" EditMode="DataGridEditMode.Form"
             LoadingProgressColor="Color.Info" EditTrigger="DataGridEditTrigger.OnRowClick">

    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
        <PropertyColumn Property="x => x.MoneyAmount" Title="Money amount" />
        <PropertyColumn Property="x => x.DateTime" Title="Date & Time" IsEditable="false" />
        <PropertyColumn Property="x => _categories.FirstOrDefault(category => category.Id == x.CategoryId).Name" Title="Category">
            <EditTemplate>
                <MudSelect  @bind-Value="context.Item.CategoryId" Required RequiredError="You must select a Category!!!" Margin="@Margin.Dense">
                     @foreach (var category in _categories)
                    {
                        <MudSelectItem Value="category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect>
             </EditTemplate>
        </PropertyColumn>
    </Columns>

    @* <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Money amount">@context.MoneyAmount</MudTd>
        <MudTd DataLabel="Date & Time">@context.DateTime</MudTd>
        <MudTd DataLabel="Category">@context.CategoryName</MudTd>
    </RowTemplate> *@
</MudDataGrid>

 @code {
    List<Operation> _operations = new List<Operation>();
    List<Category> _categories = new List<Category>();
    bool _drawerOpen = false;

    protected override async Task OnInitializedAsync() => await LoadData();

    async Task LoadData()
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        _operations = await httpClient.GetFromJsonAsync<List<Operation>>("/api/operation") ?? _operations;
        _categories = await httpClient.GetFromJsonAsync<List<Category>>("/api/category") ?? _categories;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task StartedEditingItem(Operation item)
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        if (_categories.Count == 0)
            _categories = await httpClient.GetFromJsonAsync<List<Category>>("/api/category") ?? _categories;
    }

    async Task CommittedItemChanges(Operation item)
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        HttpResponseMessage response = await httpClient.PutAsJsonAsync("/api/operation", item);
    }
}
