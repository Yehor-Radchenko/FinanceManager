@page "/categories"

@using System.Text.Json
@using FinanceManagerBlazorApp.ViewModels;
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor

@layout _Layout

@inject IHttpClientFactory ClientFactory

<h1 class="mb-4">Categories</h1>

<MudDataGrid T="Category" Items="@_categories" ReadOnly="false" Hover="true" Breakpoint="Breakpoint.Sm"
             CommittedItemChanges="@CommittedItemChanges" EditMode="DataGridEditMode.Form"
             LoadingProgressColor="Color.Info" EditTrigger="DataGridEditTrigger.OnRowClick">

    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Type">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.Type" Required RequiredError="You must select a Type!!!" Margin="@Margin.Dense">
                     <MudSelectItem Value="1">Income</MudSelectItem>
                     <MudSelectItem Value="2">Expense</MudSelectItem>
                 </MudSelect>
             </EditTemplate>
             <CellTemplate>
                 @DisplayType(context.Item)
             </CellTemplate>
         </PropertyColumn>
     </Columns>
 </MudDataGrid>

 <style>
    .add-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
    }
</style>

<MudButton Class="add-button" Color="Color.Primary" Variant="Variant.Filled" @onclick="OpenAddCategoryDialog">Add</MudButton>

 <MudDialog @bind-IsVisible="@_isAddCategoryDialogOpen">
     <DialogContent>
         <div style="text-align: center; padding-bottom: 16px;">
             <h3>Add new category</h3>
         </div>
         <MudForm Model="@category">
             <MudTextField @bind-Value="@category.Name" Label="Name" Required="true" />
             <MudSelect @bind-Value="@category.Type" Label="Type" Required="true">
                 <MudSelectItem Value="0">*select type*</MudSelectItem>
                 <MudSelectItem Value="1">Income</MudSelectItem>
                 <MudSelectItem Value="2">Expense</MudSelectItem>
             </MudSelect>
         </MudForm>
     </DialogContent>
     <DialogActions>
         <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveCategoryClick">Save</MudButton>
         <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="CloseAddCategoryDialog">Cancel</MudButton>
     </DialogActions>
 </MudDialog>

 @code {
    List<Category> _categories = new List<Category>();
    bool _isAddCategoryDialogOpen = false;
    Category category = new Category();
    bool _drawerOpen = false;

    protected override async Task OnInitializedAsync() => await LoadData();

    async Task LoadData()
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        _categories = await httpClient.GetFromJsonAsync<List<Category>>("/api/category") ?? _categories;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task CommittedItemChanges(Category item)
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        HttpResponseMessage response = await httpClient.PutAsJsonAsync("/api/category", item);
    }

    string DisplayType(Category item)
    {
        switch (item.Type)
        {
            case 1:
                return "Income";
            case 2:
                return "Expense";
            default:
                return "Unknown";
        }
    }

    void OpenAddCategoryDialog()
    {
        _isAddCategoryDialogOpen = true;
    }

    void CloseAddCategoryDialog()
    {
        _isAddCategoryDialogOpen = false;
    }
    private async Task SaveCategoryClick()
    {
        HttpClient httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7016");
        HttpResponseMessage response = await httpClient.PostAsJsonAsync<Category>("/api/category", category);
        CloseAddCategoryDialog();
    }
}
